#==========[¤]==========#
#                       #
#        Global         #
#       Functions       #
#                       #
#==========[¤]==========#
#
# This file is synced over the BungeeCord Network
# 	and should therefore ONLY execute tasks which CAN
#	affect players on join on ANY server of the network.
#
options:
    bench-id : "siege"

#
# TellRaw
#
function TellRaw(Player: player,Text: string,HoverText: string,URL: string):
	execute console command "tellraw %{_Player}% {""text"":""%{_Text}%"",""clickEvent"":{""action"":""open_url"",""value"":""%{_URL}%""},""hoverEvent"":{""action"":""show_text"",""value"":""%{_HoverText}%""}}"

#
# ActionBar
#
function ActionBarSend(Player: player, Text: text):
    loop 3 times:
        send actionbar "&7%{_Text}%" to {_Player}
        wait 2 seconds

#
# Teleportation
#

#With pitch and yaw
function Teleportation(Player: player, x: integer, y: integer, z: integer, Yaw: number, Pitch: number, World: string):
    set {_loc} to location at {_x}, {_y}, {_z} in world "%{_World}%"
    set {_Yaw} to {_Yaw} + 0.001
    set {_Pitch} to {_Pitch} + 0.001
    set {_loc}'s yaw to {_Yaw}
    set {_loc}'s pitch to {_Pitch}
    teleport {_Player} to {_loc}


#Particles
function TeleportParticles(Player: player):
    drawRings particle "redstone", speed 1, RGB 255, 255, 255, center {_Player}, id "teleport_%{_Player}%", randomRotation true, animated true, radius 1, ringCount 4, ringDensity 1, visibleRange 32
    drawDot count 50, particle "mobspell", XYZ 255, 255, 255, center {_Player}, visibleRange 32, pulseDelay 1, keepFor 10 seconds
    wait 10 seconds
    stopEffect id "teleport_%{_Player}%"

#
# PackChecker
#
    # This code can be easily updated with a new pack version by mapping a new item
    # to each of the numbers. This must be done in both the texture pack and here.
    # e.g. change the stick to a bucket.
function PackChecker(Player: player):
    set {_uuid} to {_Player}'s uuid
    delete {local::temp::%{_uuid}%::packcheck::*}
    delete {local::temp::%{_uuid}%::packchecksecret::*}

    set {_instructions} to book named "&aVérification du pack de ressources"
    set line 1 of lore of {_instructions} to "&7Pour vérifier que vous"
    set line 2 of lore of {_instructions} to "&7utilisez le bon pack,"
    set line 3 of lore of {_instructions} to "&7veuillez entrer le code"
    set line 4 of lore of {_instructions} to "&7qui s'affiche."

    add stick named "&konerr" to {_code::*}
    add stick named "&ktworr" to {_code::*}
    add stick named "&kthree" to {_code::*}
    add stick named "&kfourr" to {_code::*}
    add stick named "&kfiver" to {_code::*}
    add stick named "&ksixrr" to {_code::*}
    add stick named "&kseven" to {_code::*}
    add stick named "&keight" to {_code::*}
    add stick named "&kniner" to {_code::*}

    loop 5 times:
        add random integer between 1 and 9 to {local::temp::%{_uuid}%::packchecksecret::*}

    set {_first} to {_code::%{local::temp::%{_uuid}%::packchecksecret::1}%}
    set {_second} to {_code::%{local::temp::%{_uuid}%::packchecksecret::2}%}
    set {_third} to {_code::%{local::temp::%{_uuid}%::packchecksecret::3}%}
    set {_fourth} to {_code::%{local::temp::%{_uuid}%::packchecksecret::4}%}
    set {_fifth} to {_code::%{local::temp::%{_uuid}%::packchecksecret::5}%}

    create new gui with virtual chest with 4 rows named "&aVérification":
        format gui slot 0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 and 26 with black stained glass pane named " "
        format gui slot 4 with {_instructions}

        format gui slot 11 with {_first}
        format gui slot 12 with {_second}
        format gui slot 13 with {_third}
        format gui slot 14 with {_fourth}
        format gui slot 15 with {_fifth}

        format gui slot 27 with {_code::1}:
            PackCheckerClick({_Player}, 1)
        format gui slot 28 with {_code::2}:
            PackCheckerClick({_Player}, 2) 
        format gui slot 29 with {_code::3}:
            PackCheckerClick({_Player}, 3) 
        format gui slot 30 with {_code::4}:
            PackCheckerClick({_Player}, 4)
        format gui slot 31 with {_code::5}:
            PackCheckerClick({_Player}, 5)
        format gui slot 32 with {_code::6}:
            PackCheckerClick({_Player}, 6)
        format gui slot 33 with {_code::7}:
            PackCheckerClick({_Player}, 7)
        format gui slot 34 with {_code::8}:
            PackCheckerClick({_Player}, 8)
        format gui slot 35 with {_code::9}:
            PackCheckerClick({_Player}, 9)
	
    open last gui to {_Player}

function PackCheckerClick(Player: player, Digit: integer):
    play resource sound pack "click" to {_Player} with volume 1
    set {_uuid} to {_Player}'s uuid
    add "%{_Digit}%" to {local::temp::%{_uuid}%::packcheck::*}
    PackCheckerCode({_Player})

function PackCheckerCode(Player: player):
    set {_uuid} to {_Player}'s uuid
    if size of {local::temp::%{_uuid}%::packcheck::*} >= 5:
        loop 5 times:
            set {_param} to {local::temp::%{_uuid}%::packcheck::%loop-value%} parsed as integer
            if {_param} is {local::temp::%{_uuid}%::packchecksecret::%loop-value%}:
                set {_validated} to true
            else:
                set {_validated} to false
                exit loop
        close {_Player}'s inventory
        if {_validated} is true:
            delete {local::temp::%{_uuid}%::packchecking}
            play resource sound pack "success" to {_Player} with volume 1
            wait 1 tick
            VisualIntro({_Player})
        else:
            execute bungeecord command "kick %{_Player}% -s @TexturePackLayout"

function PackCheckerForce(Player: player):
    set {_uuid} to {_Player}'s uuid
    set {local::temp::%{_uuid}%::packchecking} to true
    while {local::temp::%{_uuid}%::packchecking} is true:
        wait 1 second
        if display name of current inventory of {_Player} contains "Vérification":
            wait 1 second
        else:
            if {local::temp::%{_uuid}%::packchecking} is true:
                PackChecker({_Player})
            else:
                exit
    
#
# Sièges
#
on right click:
    if event-player's gamemode is not creative or spectator:
        if event-block is set:
            if benchCheck(event-block's location) is true:
                benchSit(event-player, event-block's location)

    if "%block at event-block's location%" contains "dragon egg":
        cancel event
        
on quit:
    event-player's vehicle is set
    event-player's vehicle's name = {@bench-id}
    eject any passengers from event-player's vehicle
    
on break:
    "%event-block%" contains "stair"
    loop all silverfishes in radius 0.5 of event-block:
        loop-entity's name = {@bench-id}
        eject any passengers from loop-entity
        exit loop
    
on dismount:
    event-entity's vehicle's name = {@bench-id}
    set {_entity} to event-entity's vehicle
    set {_loc} to {_entity}'s location
    set y-coord of {_loc} to 1
    wait 1 tick
    teleport {_entity} to {_loc}
    set {_entity}'s health to 0

function benchCheck(loc: location) :: boolean:
    if "%block at {_loc}%" contains "stair":
        if data value of block at {_loc} is between 0 and 3:
            loop all silverfishes in radius 0.5 of {_loc}:
                loop-entity's name = {@bench-id}
                if loop-entity's passenger is not set:
                    kill loop-entity
                    return true
                else:
                    return false
            return true
    return false
        
function benchSit(entity: entity, loc: location):
    remove 0.49 from {_loc}'s y-coord
    spawn silverfish at {_loc}
    add "{NoAI:1,Silent:1,PersistenceRequired:0,Invulnerable:1}" to nbt of last spawned entity
    set {_uuid} to last spawned entity's uuid
    apply invisibility without any particles to last spawned entity for 365 days
    set last spawned entity's max health to 0.1
    set last spawned entity's name to {@bench-id}
    make {_entity} ride entity from uuid {_uuid}
